{"/home/usuario/dsi/practicas/pr7/src/ejercicio-1.ts":{"path":"/home/usuario/dsi/practicas/pr7/src/ejercicio-1.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":49}},"2":{"start":{"line":6,"column":0},"end":{"line":15,"column":59}},"3":{"start":{"line":7,"column":4},"end":{"line":7,"column":46}},"4":{"start":{"line":8,"column":4},"end":{"line":8,"column":54}},"5":{"start":{"line":9,"column":4},"end":{"line":9,"column":50}},"6":{"start":{"line":10,"column":4},"end":{"line":10,"column":46}},"7":{"start":{"line":11,"column":4},"end":{"line":11,"column":49}},"8":{"start":{"line":12,"column":4},"end":{"line":12,"column":55}},"9":{"start":{"line":13,"column":4},"end":{"line":13,"column":47}},"10":{"start":{"line":14,"column":4},"end":{"line":14,"column":46}},"11":{"start":{"line":22,"column":22},"end":{"line":22,"column":24}},"12":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"13":{"start":{"line":25,"column":8},"end":{"line":25,"column":25}},"14":{"start":{"line":28,"column":4},"end":{"line":35,"column":5}},"15":{"start":{"line":30,"column":22},"end":{"line":30,"column":35}},"16":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"17":{"start":{"line":33,"column":12},"end":{"line":33,"column":32}},"18":{"start":{"line":36,"column":4},"end":{"line":36,"column":21}},"19":{"start":{"line":38,"column":0},"end":{"line":38,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":1},"end":{"line":6,"column":2}},"loc":{"start":{"line":6,"column":21},"end":{"line":15,"column":1}},"line":6},"1":{"name":"getAllergens","decl":{"start":{"line":21,"column":9},"end":{"line":21,"column":21}},"loc":{"start":{"line":21,"column":35},"end":{"line":37,"column":1}},"line":21}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":14},"end":{"line":15,"column":57}},"type":"binary-expr","locations":[{"start":{"line":15,"column":14},"end":{"line":15,"column":30}},{"start":{"line":15,"column":35},"end":{"line":15,"column":56}}],"line":15},"1":{"loc":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},{"start":{"line":24,"column":4},"end":{"line":26,"column":5}}],"line":24},"2":{"loc":{"start":{"line":24,"column":8},"end":{"line":24,"column":57}},"type":"binary-expr","locations":[{"start":{"line":24,"column":8},"end":{"line":24,"column":38}},{"start":{"line":24,"column":42},"end":{"line":24,"column":57}}],"line":24},"3":{"loc":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},{"start":{"line":32,"column":8},"end":{"line":34,"column":9}}],"line":32},"4":{"loc":{"start":{"line":32,"column":12},"end":{"line":32,"column":72}},"type":"binary-expr","locations":[{"start":{"line":32,"column":12},"end":{"line":32,"column":37}},{"start":{"line":32,"column":41},"end":{"line":32,"column":72}}],"line":32}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":4,"12":4,"13":0,"14":4,"15":64,"16":64,"17":5,"18":4,"19":1},"f":{"0":1,"1":4},"b":{"0":[1,1],"1":[0,4],"2":[4,4],"3":[5,59],"4":[64,32]},"inputSourceMap":{"version":3,"file":"/home/usuario/dsi/practicas/pr7/src/ejercicio-1.ts","sources":["/home/usuario/dsi/practicas/pr7/src/ejercicio-1.ts"],"names":[],"mappings":";;;AAAA,qBAAqB;AACrB,IAAY,QAEX;AAFD,WAAY,QAAQ;IAAI,yCAAS,CAAA;IAAE,iDAAa,CAAA;IAAE,6CAAW,CAAA;IAAE,yCAAS,CAAA;IACtE,4CAAW,CAAA;IAAE,kDAAc,CAAA;IAAE,0CAAU,CAAA;IAAE,yCAAU,CAAA;AACrD,CAAC,EAFW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAEnB;AAED;;;;GAIG;AACH,SAAgB,YAAY,CAAC,WAAmB;IAE9C,MAAM,SAAS,GAAa,EAAE,CAAC;IAC/B,qDAAqD;IACrD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,WAAW,GAAG,CAAC,EAAE;QACrD,OAAO,SAAS,CAAC;KAClB;IAED,oDAAoD;IACpD,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE;QAE1B,2DAA2D;QAC3D,MAAM,KAAK,GAAQ,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEjC,4EAA4E;QAC5E,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,KAAK,KAAK,EAAE;YAChE,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACrB;KACF;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AArBD,oCAqBC","sourcesContent":["/// Enum of allergens\nexport enum Allergen {  Huevo = 1, Cacahuete = 2, Marisco = 4, Fresa = 8, \n  Tomate = 16, Chocolate = 32, Polen = 64, Gato = 128\n}\n\n/**\n * This function returns an array of allergens based on the punctuation passed as a parameter\n * @param punctuation \n * @returns an array of allergens or undefined if the punctuation is not a positive integer\n */\nexport function getAllergens(punctuation: number): string[] | undefined {\n  \n  const allergens: string[] = [];\n  /// Check if the number is an integer and is positive\n  if (!Number.isInteger(punctuation) || punctuation < 0) {\n    return undefined;\n  }\n\n  /// We make a for...in loop to iterate over the enum\n  for (const key in Allergen) {\n\n    /// We pick the value of the key (the name of the variable)\n    const value: any = Allergen[key];\n\n    /// We check if the value is a number and if the value is in the punctuation\n    if (typeof value === 'number' && (punctuation & value) === value) {\n      allergens.push(key);\n    }\n  }\n\n  return allergens;\n}\n\n\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"59d281003970cf64ff8d03307e5b229b958c5224","contentHash":"b58b0f0c8c04ecffeeb78f9d9d7795a6da981fea699e235c2d52336bb2f90f70"},"/home/usuario/dsi/practicas/pr7/src/ejercicio-2.ts":{"path":"/home/usuario/dsi/practicas/pr7/src/ejercicio-2.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":108}},"2":{"start":{"line":11,"column":4},"end":{"line":11,"column":38}},"3":{"start":{"line":13,"column":0},"end":{"line":13,"column":18}},"4":{"start":{"line":21,"column":4},"end":{"line":21,"column":38}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":18}},"6":{"start":{"line":31,"column":4},"end":{"line":31,"column":66}},"7":{"start":{"line":33,"column":0},"end":{"line":33,"column":20}},"8":{"start":{"line":41,"column":16},"end":{"line":41,"column":45}},"9":{"start":{"line":42,"column":4},"end":{"line":42,"column":90}},"10":{"start":{"line":44,"column":0},"end":{"line":44,"column":18}},"11":{"start":{"line":52,"column":4},"end":{"line":52,"column":32}},"12":{"start":{"line":54,"column":0},"end":{"line":54,"column":20}},"13":{"start":{"line":61,"column":4},"end":{"line":61,"column":25}},"14":{"start":{"line":63,"column":0},"end":{"line":63,"column":20}},"15":{"start":{"line":70,"column":4},"end":{"line":70,"column":48}},"16":{"start":{"line":72,"column":0},"end":{"line":72,"column":18}}},"fnMap":{"0":{"name":"add","decl":{"start":{"line":10,"column":9},"end":{"line":10,"column":12}},"loc":{"start":{"line":10,"column":19},"end":{"line":12,"column":1}},"line":10},"1":{"name":"sub","decl":{"start":{"line":20,"column":9},"end":{"line":20,"column":12}},"loc":{"start":{"line":20,"column":19},"end":{"line":22,"column":1}},"line":20},"2":{"name":"mult","decl":{"start":{"line":30,"column":9},"end":{"line":30,"column":13}},"loc":{"start":{"line":30,"column":20},"end":{"line":32,"column":1}},"line":30},"3":{"name":"div","decl":{"start":{"line":40,"column":9},"end":{"line":40,"column":12}},"loc":{"start":{"line":40,"column":19},"end":{"line":43,"column":1}},"line":40},"4":{"name":"prod","decl":{"start":{"line":51,"column":9},"end":{"line":51,"column":13}},"loc":{"start":{"line":51,"column":20},"end":{"line":53,"column":1}},"line":51},"5":{"name":"conj","decl":{"start":{"line":60,"column":9},"end":{"line":60,"column":13}},"loc":{"start":{"line":60,"column":17},"end":{"line":62,"column":1}},"line":60},"6":{"name":"abs","decl":{"start":{"line":69,"column":9},"end":{"line":69,"column":12}},"loc":{"start":{"line":69,"column":16},"end":{"line":71,"column":1}},"line":69}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1},"f":{"0":1,"1":0,"2":1,"3":1,"4":1,"5":1,"6":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/dsi/practicas/pr7/src/ejercicio-2.ts","sources":["/home/usuario/dsi/practicas/pr7/src/ejercicio-2.ts"],"names":[],"mappings":";;;AAOA;;;;;EAKE;AACF,SAAgB,GAAG,CAAC,CAAU,EAAE,CAAU;IACxC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC;AAFD,kBAEC;AACD;;;;;EAKE;AACF,SAAgB,GAAG,CAAC,CAAU,EAAE,CAAU;IACxC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC;AAFD,kBAEC;AACD;;;;;EAKE;AACF,SAAgB,IAAI,CAAC,CAAU,EAAE,CAAU;IACzC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC;AAFD,oBAEC;AACD;;;;;EAKE;AACF,SAAgB,GAAG,CAAC,CAAU,EAAE,CAAU;IACxC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;AACxF,CAAC;AAHD,kBAGC;AACD;;;;;EAKE;AACF,SAAgB,IAAI,CAAC,CAAU,EAAE,CAAS;IACxC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC9B,CAAC;AAFD,oBAEC;AACD;;;;EAIE;AACF,SAAgB,IAAI,CAAC,CAAU;IAC7B,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC;AAFD,oBAEC;AACD;;;;EAIE;AACF,SAAgB,GAAG,CAAC,CAAU;IAC5B,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC;AAFD,kBAEC","sourcesContent":["\n/**\n@typedef {Array<number>} Complex - Array representing a complex number\n@property {number} 0 - The real part of the complex number\n@property {number} 1 - The imaginary part of the complex number\n*/\nexport type Complex = [number, number];\n/**\nAdds two complex numbers.\n@param {Complex} a - The first complex number\n@param {Complex} b - The second complex number\n@returns {Complex} The result of adding the two complex numbers\n*/\nexport function add(a: Complex, b: Complex): Complex {\n  return [a[0] + b[0], a[1] + b[1]];\n}\n/**\nSubtracts two complex numbers.\n@param {Complex} a - The first complex number\n@param {Complex} b - The second complex number\n@returns {Complex} The result of subtracting the two complex numbers\n*/\nexport function sub(a: Complex, b: Complex): Complex {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n/**\nMultiplies two complex numbers.\n@param {Complex} a - The first complex number\n@param {Complex} b - The second complex number\n@returns {Complex} The result of multiplying the two complex numbers\n*/\nexport function mult(a: Complex, b: Complex): Complex {\n  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\n/**\nDivides two complex numbers.\n@param {Complex} a - The first complex number\n@param {Complex} b - The second complex number\n@returns {Complex} The result of dividing the two complex numbers\n*/\nexport function div(a: Complex, b: Complex) {\n  const den = (b[0] * b[0]) + (b[1] * b[1]);\n  return [((a[0] * b[0]) + (a[1] * b[1])) / den, ((a[1] * b[0]) - (a[0] * b[1])) / den];\n}\n/**\nMultiplies a complex number by a scalar.\n@param {Complex} a - The complex number\n@param {number} b - The scalar\n@returns {Complex} The result of multiplying the complex number by the scalar\n*/\nexport function prod(a: Complex, b: number): Complex {\n  return [a[0] * b, a[1] * b];\n}\n/**\nReturns the conjugate of a complex number.\n@param {Complex} a - The complex number\n@returns {Complex} The conjugate of the complex number\n*/\nexport function conj(a: Complex): Complex {\n  return [a[0], -a[1]];\n}\n/**\nReturns the absolute value of a complex number.\n@param {Complex} a - The complex number\n@returns {number} The absolute value of the complex number\n*/\nexport function abs(a: Complex): number {\n  return Math.sqrt(a[0] * a[0] + a[1] * a[1]);\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a274aacb360b99763b3916ad503f4de21c436544","contentHash":"1f4074003c353b3e29094936bb4c6eb451e71320b50c2699cbe4d299f59d1035"},"/home/usuario/dsi/practicas/pr7/src/ejercicio-4.ts":{"path":"/home/usuario/dsi/practicas/pr7/src/ejercicio-4.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":13,"column":19},"end":{"line":13,"column":21}},"3":{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},"4":{"start":{"line":15,"column":17},"end":{"line":15,"column":18}},"5":{"start":{"line":16,"column":8},"end":{"line":16,"column":41}},"6":{"start":{"line":18,"column":4},"end":{"line":18,"column":18}},"7":{"start":{"line":20,"column":0},"end":{"line":20,"column":22}}},"fnMap":{"0":{"name":"myMap","decl":{"start":{"line":11,"column":9},"end":{"line":11,"column":14}},"loc":{"start":{"line":11,"column":33},"end":{"line":19,"column":1}},"line":11}},"branchMap":{},"s":{"0":1,"1":1,"2":2,"3":2,"4":2,"5":4,"6":2,"7":1},"f":{"0":2},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/dsi/practicas/pr7/src/ejercicio-4.ts","sources":["/home/usuario/dsi/practicas/pr7/src/ejercicio-4.ts"],"names":[],"mappings":";;;AAAA;;;;;;EAME;AACF,SAAgB,KAAK,CAAC,GAAa,EAAE,WAAoC;IACvE,uBAAuB;IACvB,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,6EAA6E;IAC7E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KAClC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AARD,sBAQC","sourcesContent":["/**\n\nApplies a function to each element of an array and returns a new array with the results\n@param arr The input array to be operated\n@param in_function The function to be applied to each element of the array\n@returns A new array with the results of applying the function to each element of the input array\n*/\nexport function myMap(arr: number[], in_function: (num: number) => number): number[] {\n  // We make the constant\n  const result: number[] = [];\n  // Then we make a for loop to operate the array with the in_function function\n  for (let i = 0; i < arr.length; i++) {\n    result.push(in_function(arr[i]));\n  }\n  return result;\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0f34a491ed5a7ec9cbbbc98ad3782b9b117ed095","contentHash":"d218faf232ddc9dd082141371b9b26d4bcf812bfb8318af1d1b04a812906a052"},"/home/usuario/dsi/practicas/pr7/src/ejercicio-5.ts":{"path":"/home/usuario/dsi/practicas/pr7/src/ejercicio-5.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":33}},"2":{"start":{"line":11,"column":19},"end":{"line":11,"column":21}},"3":{"start":{"line":13,"column":4},"end":{"line":15,"column":5}},"4":{"start":{"line":13,"column":17},"end":{"line":13,"column":18}},"5":{"start":{"line":14,"column":8},"end":{"line":14,"column":43}},"6":{"start":{"line":17,"column":18},"end":{"line":17,"column":19}},"7":{"start":{"line":18,"column":19},"end":{"line":18,"column":20}},"8":{"start":{"line":19,"column":17},"end":{"line":19,"column":31}},"9":{"start":{"line":20,"column":19},"end":{"line":20,"column":20}},"10":{"start":{"line":21,"column":17},"end":{"line":21,"column":31}},"11":{"start":{"line":23,"column":4},"end":{"line":42,"column":5}},"12":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"13":{"start":{"line":25,"column":23},"end":{"line":25,"column":31}},"14":{"start":{"line":26,"column":12},"end":{"line":26,"column":46}},"15":{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},"16":{"start":{"line":29,"column":23},"end":{"line":29,"column":35}},"17":{"start":{"line":30,"column":12},"end":{"line":30,"column":44}},"18":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"19":{"start":{"line":33,"column":23},"end":{"line":33,"column":33}},"20":{"start":{"line":34,"column":12},"end":{"line":34,"column":44}},"21":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"22":{"start":{"line":37,"column":23},"end":{"line":37,"column":33}},"23":{"start":{"line":38,"column":12},"end":{"line":38,"column":46}},"24":{"start":{"line":41,"column":8},"end":{"line":41,"column":51}},"25":{"start":{"line":43,"column":4},"end":{"line":43,"column":18}},"26":{"start":{"line":45,"column":0},"end":{"line":45,"column":42}}},"fnMap":{"0":{"name":"getSpiralMatrix","decl":{"start":{"line":10,"column":9},"end":{"line":10,"column":24}},"loc":{"start":{"line":10,"column":37},"end":{"line":44,"column":1}},"line":10}},"branchMap":{"0":{"loc":{"start":{"line":23,"column":11},"end":{"line":23,"column":51}},"type":"binary-expr","locations":[{"start":{"line":23,"column":11},"end":{"line":23,"column":29}},{"start":{"line":23,"column":33},"end":{"line":23,"column":51}}],"line":23}},"s":{"0":1,"1":1,"2":3,"3":3,"4":3,"5":12,"6":3,"7":3,"8":3,"9":3,"10":3,"11":3,"12":7,"13":7,"14":19,"15":7,"16":7,"17":12,"18":7,"19":7,"20":12,"21":7,"22":7,"23":7,"24":7,"25":3,"26":1},"f":{"0":3},"b":{"0":[10,7]},"inputSourceMap":{"version":3,"file":"/home/usuario/dsi/practicas/pr7/src/ejercicio-5.ts","sources":["/home/usuario/dsi/practicas/pr7/src/ejercicio-5.ts"],"names":[],"mappings":";;;AAAA;;;;;EAKE;AACF,SAAgB,eAAe,CAAC,UAAkB;IAChD,MAAM,MAAM,GAAe,EAAE,CAAC;IAC9B,+CAA+C;IAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;QACnC,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;KACpC;IAED,oDAAoD;IACpD,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,IAAI,QAAQ,GAAG,CAAC,CAAC;IACjB,IAAI,MAAM,GAAG,UAAU,GAAG,CAAC,CAAC;IAC5B,IAAI,QAAQ,GAAG,CAAC,CAAC;IACjB,IAAI,MAAM,GAAG,UAAU,GAAG,CAAC,CAAC;IAE5B,8CAA8C;IAC9C,OAAO,QAAQ,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,EAAE;QAC/C,mBAAmB;QACnB,KAAK,IAAI,GAAG,GAAG,QAAQ,EAAE,GAAG,IAAI,MAAM,EAAE,GAAG,EAAE,EAAE;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,OAAO,EAAE,CAAC;SACnC;QACD,wBAAwB;QACxB,KAAK,IAAI,GAAG,GAAG,QAAQ,GAAG,CAAC,EAAE,GAAG,IAAI,MAAM,EAAE,GAAG,EAAE,EAAE;YACjD,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,OAAO,EAAE,CAAC;SACjC;QAED,sBAAsB;QACtB,KAAK,IAAI,GAAG,GAAG,MAAM,GAAG,CAAC,EAAE,GAAG,IAAI,QAAQ,EAAE,GAAG,EAAE,EAAE;YACjD,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,OAAO,EAAE,CAAC;SACjC;QAED,uBAAuB;QACvB,KAAK,IAAI,GAAG,GAAG,MAAM,GAAG,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,GAAG,EAAE,EAAE;YAChD,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,OAAO,EAAE,CAAC;SACnC;QAED,0DAA0D;QAC1D,QAAQ,EAAE,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,CAAC;KAC5C;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAxCD,0CAwCC","sourcesContent":["/**\n\nGenerates a square matrix of the given dimensions in a spiral pattern.\n@param dimensions - The number of rows/columns for the square matrix.\n@returns The spiral matrix as a two-dimensional array of numbers.\n*/\nexport function getSpiralMatrix(dimensions: number): number[][] {\n  const result: number[][] = [];\n  // create a new array with the given dimensions\n  for (let i = 0; i < dimensions; i++) {\n    result.push(new Array(dimensions));\n  }\n  \n  // initialize counters and starting/ending positions\n  let counter = 1;\n  let startRow = 0;\n  let endRow = dimensions - 1;\n  let startCol = 0;\n  let endCol = dimensions - 1;\n  \n  // loop through the matrix in a spiral pattern\n  while (startRow <= endRow && startCol <= endCol) {\n    // fill the top row\n    for (let col = startCol; col <= endCol; col++) {\n      result[startRow][col] = counter++;\n    }\n    // fill the right column\n    for (let row = startRow + 1; row <= endRow; row++) {\n      result[row][endCol] = counter++;\n    }\n    \n    // fill the bottom row\n    for (let col = endCol - 1; col >= startCol; col--) {\n      result[endRow][col] = counter++;\n    }\n    \n    // fill the left column\n    for (let row = endRow - 1; row > startRow; row--) {\n      result[row][startCol] = counter++;\n    }\n    \n    // update starting and ending positions for next iteration\n    startRow++, endRow--, startCol++, endCol--;\n  }\n  \n  return result;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"84a22ffe65ff82d87022a3941ff015d7f759adea","contentHash":"a2576083923e922653bdb32bc2add32db1b420a0b3ae0d40c6f8b5de015fe172"},"/home/usuario/dsi/practicas/pr7/src/ejercicio-6.ts":{"path":"/home/usuario/dsi/practicas/pr7/src/ejercicio-6.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":63}},"2":{"start":{"line":11,"column":19},"end":{"line":11,"column":21}},"3":{"start":{"line":12,"column":14},"end":{"line":12,"column":22}},"4":{"start":{"line":13,"column":14},"end":{"line":13,"column":15}},"5":{"start":{"line":14,"column":4},"end":{"line":29,"column":5}},"6":{"start":{"line":14,"column":17},"end":{"line":14,"column":18}},"7":{"start":{"line":15,"column":8},"end":{"line":28,"column":9}},"8":{"start":{"line":16,"column":12},"end":{"line":16,"column":27}},"9":{"start":{"line":17,"column":25},"end":{"line":17,"column":39}},"10":{"start":{"line":18,"column":26},"end":{"line":18,"column":40}},"11":{"start":{"line":19,"column":24},"end":{"line":19,"column":26}},"12":{"start":{"line":20,"column":12},"end":{"line":25,"column":13}},"13":{"start":{"line":21,"column":16},"end":{"line":21,"column":39}},"14":{"start":{"line":24,"column":16},"end":{"line":24,"column":47}},"15":{"start":{"line":26,"column":12},"end":{"line":26,"column":31}},"16":{"start":{"line":27,"column":12},"end":{"line":27,"column":31}},"17":{"start":{"line":30,"column":4},"end":{"line":30,"column":18}},"18":{"start":{"line":32,"column":0},"end":{"line":32,"column":46}},"19":{"start":{"line":40,"column":19},"end":{"line":40,"column":21}},"20":{"start":{"line":41,"column":4},"end":{"line":54,"column":5}},"21":{"start":{"line":41,"column":17},"end":{"line":41,"column":18}},"22":{"start":{"line":42,"column":20},"end":{"line":42,"column":29}},"23":{"start":{"line":43,"column":26},"end":{"line":43,"column":42}},"24":{"start":{"line":44,"column":18},"end":{"line":44,"column":42}},"25":{"start":{"line":45,"column":18},"end":{"line":45,"column":42}},"26":{"start":{"line":46,"column":8},"end":{"line":53,"column":9}},"27":{"start":{"line":47,"column":12},"end":{"line":47,"column":29}},"28":{"start":{"line":50,"column":12},"end":{"line":52,"column":13}},"29":{"start":{"line":50,"column":25},"end":{"line":50,"column":28}},"30":{"start":{"line":51,"column":16},"end":{"line":51,"column":31}},"31":{"start":{"line":55,"column":4},"end":{"line":55,"column":18}},"32":{"start":{"line":57,"column":0},"end":{"line":57,"column":46}}},"fnMap":{"0":{"name":"fromArrayToRanges","decl":{"start":{"line":10,"column":9},"end":{"line":10,"column":26}},"loc":{"start":{"line":10,"column":34},"end":{"line":31,"column":1}},"line":10},"1":{"name":"fromRangesToArray","decl":{"start":{"line":39,"column":9},"end":{"line":39,"column":26}},"loc":{"start":{"line":39,"column":35},"end":{"line":56,"column":1}},"line":39}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":8},"end":{"line":28,"column":9}},"type":"if","locations":[{"start":{"line":15,"column":8},"end":{"line":28,"column":9}},{"start":{"line":15,"column":8},"end":{"line":28,"column":9}}],"line":15},"1":{"loc":{"start":{"line":20,"column":12},"end":{"line":25,"column":13}},"type":"if","locations":[{"start":{"line":20,"column":12},"end":{"line":25,"column":13}},{"start":{"line":20,"column":12},"end":{"line":25,"column":13}}],"line":20},"2":{"loc":{"start":{"line":46,"column":8},"end":{"line":53,"column":9}},"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":53,"column":9}},{"start":{"line":46,"column":8},"end":{"line":53,"column":9}}],"line":46}},"s":{"0":1,"1":1,"2":4,"3":4,"4":4,"5":4,"6":4,"7":21,"8":10,"9":10,"10":10,"11":10,"12":10,"13":4,"14":6,"15":10,"16":10,"17":4,"18":1,"19":4,"20":4,"21":4,"22":10,"23":10,"24":10,"25":10,"26":10,"27":4,"28":6,"29":6,"30":17,"31":4,"32":1},"f":{"0":4,"1":4},"b":{"0":[10,11],"1":[4,6],"2":[4,6]},"inputSourceMap":{"version":3,"file":"/home/usuario/dsi/practicas/pr7/src/ejercicio-6.ts","sources":["/home/usuario/dsi/practicas/pr7/src/ejercicio-6.ts"],"names":[],"mappings":";;;AAAA;;;;;EAKE;AACF,SAAgB,iBAAiB,CAAC,KAAe;IAC/C,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACnB,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACvC,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;YAC/B,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,MAAM,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC5B,IAAI,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC7B,IAAI,KAAK,GAAG,EAAE,CAAC;YACf,IAAI,GAAG,KAAK,GAAG,EAAC;gBACd,KAAK,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;aACxB;iBACI;gBACH,KAAK,GAAG,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC;aAChC;YACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnB,GAAG,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SACpB;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AArBD,8CAqBC;AAED;;;;;EAKE;AACF,SAAgB,iBAAiB,CAAC,MAAgB;IAChD,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,GAAG,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC,IAAI,GAAG,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE;YACd,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;aACI;YACH,KAAK,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC/B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAChB;SACF;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAjBD,8CAiBC","sourcesContent":["/**\n\nConverts an array of numbers into an array of ranges represented as strings.\n@param array - The input array of numbers.\n@returns An array of ranges represented as strings.\n*/\nexport function fromArrayToRanges(array: number[]): string[] {\n  const result: string[] = [];\n  let ini = array[0];\n  let end = 0;\n  for (let i = 0; i < array.length; i++) {\n  if (array[i] + 1 !== array[i + 1]) {\n      end = array[i];\n      let in_str = ini.toString();\n      let end_str = end.toString();\n      let range = \"\";\n      if (ini === end){\n        range = ini.toString();\n      }\n      else {\n        range = in_str + \"_\" + end_str;\n      }\n      result.push(range);\n      ini = array[i + 1];\n    }\n  }\n  return result;\n}\n  \n/**\n\nConverts an array of ranges represented as strings into an array of numbers.\n@param ranges - The input array of ranges represented as strings.\n@returns An array of numbers.\n*/\nexport function fromRangesToArray(ranges: string[]): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < ranges.length; i++) {\n    let range = ranges[i];\n    let range_array = range.split(\"_\");\n    let ini = parseInt(range_array[0]);\n    let end = parseInt(range_array[1]);\n    if (isNaN(end)) {\n      result.push(ini);\n    }\n    else {\n      for (let j = ini; j <= end; j++) {\n        result.push(j);\n      }\n    }\n  }\n  return result;\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"49594a32b2f110d4c73660f3caf3ec886dc16fc7","contentHash":"cf18533b9a2e96870b489a0c43ec6dd389d19b4c73931c875cbcf2683edc5b19"},"/home/usuario/dsi/practicas/pr7/src/ejercicio-7.ts":{"path":"/home/usuario/dsi/practicas/pr7/src/ejercicio-7.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":11,"column":0},"end":{"line":22,"column":50}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":40}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":52}},"5":{"start":{"line":14,"column":4},"end":{"line":14,"column":38}},"6":{"start":{"line":15,"column":4},"end":{"line":15,"column":44}},"7":{"start":{"line":16,"column":4},"end":{"line":16,"column":46}},"8":{"start":{"line":17,"column":4},"end":{"line":17,"column":40}},"9":{"start":{"line":18,"column":4},"end":{"line":18,"column":38}},"10":{"start":{"line":19,"column":4},"end":{"line":19,"column":44}},"11":{"start":{"line":20,"column":4},"end":{"line":20,"column":38}},"12":{"start":{"line":21,"column":4},"end":{"line":21,"column":42}},"13":{"start":{"line":30,"column":4},"end":{"line":30,"column":32}},"14":{"start":{"line":32,"column":0},"end":{"line":32,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":1},"end":{"line":11,"column":2}},"loc":{"start":{"line":11,"column":18},"end":{"line":22,"column":1}},"line":11},"1":{"name":"decodeResistor","decl":{"start":{"line":29,"column":9},"end":{"line":29,"column":23}},"loc":{"start":{"line":29,"column":29},"end":{"line":31,"column":1}},"line":29}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":11},"end":{"line":22,"column":48}},"type":"binary-expr","locations":[{"start":{"line":22,"column":11},"end":{"line":22,"column":24}},{"start":{"line":22,"column":29},"end":{"line":22,"column":47}}],"line":22}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":6,"14":1},"f":{"0":1,"1":6},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/home/usuario/dsi/practicas/pr7/src/ejercicio-7.ts","sources":["/home/usuario/dsi/practicas/pr7/src/ejercicio-7.ts"],"names":[],"mappings":";;;AAAA;;;;;EAKE;AACF,IAAY,KAWT;AAXH,WAAY,KAAK;IACf,mCAAS,CAAA;IACT,+CAAU,CAAA;IACV,iCAAQ,CAAA;IACR,uCAAW,CAAA;IACX,yCAAY,CAAA;IACZ,mCAAS,CAAA;IACT,iCAAQ,CAAA;IACR,uCAAW,CAAA;IACX,iCAAQ,CAAA;IACR,qCAAU,CAAA;AACV,CAAC,EAXS,KAAK,GAAL,aAAK,KAAL,aAAK,QAWd;AACD;;;;;EAKA;AACF,SAAgB,cAAc,CAAC,GAAY;IACzC,OAAO,GAAG,CAAC,CAAC,CAAC,GAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC;AAFD,wCAEC","sourcesContent":["/**\n\nThis is an enum for the colors of the resistors.\n@readonly\n@enum {number}\n*/\nexport enum Color {\n  Negro = 0,\n  Marrón = 1,\n  Rojo = 2,\n  Naranja = 3,\n  Amarillo = 4,\n  Verde = 5,\n  Azul = 6,\n  Violeta = 7,\n  Gris = 8,\n  Blanco = 9,\n  }\n  /**\n  \nThis function takes an array of Color enums and decodes the resistor values.\n@param {Color[]} arr - The array of Color enums.\n@returns {number} The decoded value of the resistor.\n*/\nexport function decodeResistor(arr: Color[]): number {\n  return arr[0]*10 + arr[1];\n}\n\n\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d89b600089c8c6503ae798850d8666bbf48ccf1a","contentHash":"98de745d563a99f15b4e5c816c3c505924bd42a7cb652dcbdbdbacf5d1b2e1db"}}